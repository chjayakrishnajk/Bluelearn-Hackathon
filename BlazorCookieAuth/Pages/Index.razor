@page "/"
@using Syncfusion.Blazor.DropDowns
@using Core
@using Core.Issues
@using System.Collections.ObjectModel
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.RichTextEditor
@using BlazorCookieAuth.Components
@using BlazorCookieAuth.Data
<SfListBox @ref="listbox1" DataSource="@Issues" TItem="Issue" AllowDragAndDrop="true" TValue="string[]">
    <ListBoxFieldSettings Text="Title"></ListBoxFieldSettings>
    <ListBoxTemplates TItem="Issue">
        <ItemTemplate>
            <div class="d-flex" style="" @onclick="@(e => OnUpdateClick(context))">
                <div class="d-flex align-items-center flex-grow-1">
                    <div>@((context as Issue).Title)</div>
                </div>
            </div>
        </ItemTemplate>
    </ListBoxTemplates>
</SfListBox>
<IssueEditor @ref="CreateEditor" ButtonText="Create" ClickedIssue="@ClickedIssue" OnEdited="OnEdited"></IssueEditor>
<IssueEditor @ref="UpdateEditor" ButtonText="Update" ClickedIssue="@ClickedIssue" OnEdited="OnEdited"></IssueEditor>
<IssueEditor @ref="DeleteEditor" ButtonText="Delete" ClickedIssue="@ClickedIssue" OnEdited="OnEdited"></IssueEditor>
<style>
    .e-input-group, .e-input-group.e-control-wrapper {
        margin-bottom: 7px;
    }

    .e-listbox-container .e-list-item.e-selected {
        background-color: #b2b7bb;
    }
</style>
@code
{
    IssueEditor CreateEditor;
    IssueEditor UpdateEditor;
    IssueEditor DeleteEditor;
    public async void OnEdited(OnEditedResult onEdited)
    {
        if(onEdited.Type == "Create")
        {
            var result = await Core.CreateIssue(onEdited.Issue, Email);
        }
        else if(onEdited.Type == "Update")
        {
            var result = await Core.UpdateIssue(Email, onEdited.Issue);
        }
        else if(onEdited.Type == "Delete")
        {
            var result = await Core.DeleteIssue(Email, onEdited.Issue.Id);
        }
    }
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
{
    new ToolbarItemModel() { Command = ToolbarCommand.Bold },
    new ToolbarItemModel() { Command = ToolbarCommand.Italic },
    new ToolbarItemModel() { Command = ToolbarCommand.Underline },
    new ToolbarItemModel() { Command = ToolbarCommand.FontName },
    new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
    new ToolbarItemModel() { Command = ToolbarCommand.Separator },
    new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
    new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
    new ToolbarItemModel() { Command = ToolbarCommand.Separator },
    new ToolbarItemModel() { Command = ToolbarCommand.Formats },
    new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
    new ToolbarItemModel() { Command = ToolbarCommand.Separator },
    new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
    new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
    new ToolbarItemModel() { Command = ToolbarCommand.Separator },
    new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
    new ToolbarItemModel() { Command = ToolbarCommand.Image },
    };
    public RichTextEditorImageSettings imageSettings = new RichTextEditorImageSettings();
    private SfTextBox titleTextBox;
    public List<string> tags = new List<string>() { "Beginner", "Intermediate", "Advanced" };
    private ResizeDirection[] dialogResizeDirections { get; set; } = new ResizeDirection[] { ResizeDirection.All };
    private void beforeOpen(Syncfusion.Blazor.Popups.BeforeOpenEventArgs args)
    {
        args.MaxHeight = null;
    }
    public Issue ClickedIssue = new Issue();
    public async void OnUpdateClick(Issue issue)
    {
        ClickedIssue = issue;
        StateHasChanged();
        UpdateEditor.OnIssueClick(issue);
    }
    private bool Visibility { get; set; } = false;
    private void SaveIssue()
    {
        this.Visibility = false;
    }
    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        this.Visibility = false;
    }
    SfListBox<string[], Issue> listbox1;
    public ObservableCollection<Issue> Issues = new ObservableCollection<Issue>();
    public IssueCore Core = new IssueCore();
    public void RemoveItem(Issue listData)
    {
        this.Issues.Remove(listData);
    }
    public string Email { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Core.Initiliaze();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Claims.Count() > 0)
        {
            Email = user.Claims.Where(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name").FirstOrDefault().Value;
            Issues = new ObservableCollection<Issue>(await Core.GetIssues(user.Claims.Where(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name").FirstOrDefault().Value));
        }
        imageSettings.SaveFormat = SaveFormat.Base64;
    }
    public class VehicleData
    {
        public string Text { get; set; }
        public string Id { get; set; }
    }
}