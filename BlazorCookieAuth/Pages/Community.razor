@using BlazorCookieAuth.Data
@using BlazorCookieAuth.Components
@using Core
@using Core.Issues
@page "/community"
@page "/community/{Id}"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Community</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body style="background-color:#f8f9fa;">
    <IssueEditor @ref="UpdateEditor" ButtonText="Update" ClickedIssue="@ClickedIssue" OnEdited="OnEdited" IsReadOnly="true"></IssueEditor>
    <div class="container" style="min-width:100%;">
        <div class="main-body p-0">
            <div class="inner-main-body p-2 p-sm-3 collapse forum-content show">
                @foreach (var Issue in PublicIssues)
                {
                    <div class="card mb-2" @onclick="@(e => OnUpdateClick(Issue))">
                        <div class="card-body p-2 p-sm-3">
                            <div class="media forum-item">
                                <div class="media-body">
                                    <h6><a href="/community/@Issue.Id" data-toggle="collapse" data-target=".forum-content" class="text-body">@Issue.Title</a></h6>
                                    <p class="text-secondary">
                                        @Issue.Description
                                    </p>
                                    <p class="text-muted">Asked <span class="text-secondary font-weight-bold">@Issue.Ago</span></p>
                                </div>
                            </div>
                        </div>
                    </div>

                }               
            </div>

            <!-- New Thread Modal -->
            <div class="modal fade" id="threadModal" tabindex="-1" role="dialog" aria-labelledby="threadModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <form>
                            <div class="modal-header d-flex align-items-center bg-primary text-white">
                                <h6 class="modal-title mb-0" id="threadModalLabel">New Discussion</h6>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="threadTitle">Title</label>
                                    <input type="text" class="form-control" id="threadTitle" placeholder="Enter title" autofocus="" />
                                </div>
                                <textarea class="form-control summernote" style="display: none;"></textarea>

                                <div class="custom-file form-control-sm mt-3" style="max-width: 300px;">
                                    <input type="file" class="custom-file-input" id="customFile" multiple="" />
                                    <label class="custom-file-label" for="customFile">Attachment</label>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary">Post</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <style type="text/css">
        body {
            margin-top: 20px;
            color: #1a202c;
            text-align: left;
            background-color: #e2e8f0;
        }

        .inner-wrapper {
            position: relative;
            height: calc(100vh - 3.5rem);
            transition: transform 0.3s;
        }

        @@media (min-width: 992px) {
            .sticky-navbar .inner-wrapper {
                height: calc(100vh - 3.5rem - 48px);
            }
        }

        .inner-main,
        .inner-sidebar {
            position: absolute;
            top: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
        }

        .inner-sidebar {
            left: 0;
            width: 235px;
            border-right: 1px solid #cbd5e0;
            background-color: #fff;
            z-index: 1;
        }

        .inner-main {
            right: 0;
            left: 235px;
        }

        .inner-main-footer,
        .inner-main-header,
        .inner-sidebar-footer,
        .inner-sidebar-header {
            height: 3.5rem;
            border-bottom: 1px solid #cbd5e0;
            display: flex;
            align-items: center;
            padding: 0 1rem;
            flex-shrink: 0;
        }

        .inner-main-body,
        .inner-sidebar-body {
            padding: 1rem;
            overflow-y: auto;
            position: relative;
            flex: 1 1 auto;
        }

            .inner-main-body .sticky-top,
            .inner-sidebar-body .sticky-top {
                z-index: 999;
            }

        .inner-main-footer,
        .inner-main-header {
            background-color: #fff;
        }

        .inner-main-footer,
        .inner-sidebar-footer {
            border-top: 1px solid #cbd5e0;
            border-bottom: 0;
            height: auto;
            min-height: 3.5rem;
        }

        @@media (max-width: 767.98px) {
            .inner-sidebar {
                left: -235px;
            }

            .inner-main {
                left: 0;
            }

            .inner-expand .main-body {
                overflow: hidden;
            }

            .inner-expand .inner-wrapper {
                transform: translate3d(235px, 0, 0);
            }
        }

        .nav .show > .nav-link.nav-link-faded, .nav-link.nav-link-faded.active, .nav-link.nav-link-faded:active, .nav-pills .nav-link.nav-link-faded.active, .navbar-nav .show > .nav-link.nav-link-faded {
            color: #3367b5;
            background-color: #c9d8f0;
        }

        .nav-pills .nav-link.active, .nav-pills .show > .nav-link {
            color: #fff;
            background-color: #467bcb;
        }

        .nav-link.has-icon {
            display: flex;
            align-items: center;
        }

        .nav-link.active {
            color: #467bcb;
        }

        .nav-pills .nav-link {
            border-radius: .25rem;
        }

        .nav-link {
            color: #4a5568;
        }

        .card {
            box-shadow: 0 1px 3px 0 rgba(0,0,0,.1), 0 1px 2px 0 rgba(0,0,0,.06);
        }

        .card {
            position: relative;
            display: flex;
            flex-direction: column;
            min-width: 0;
            word-wrap: break-word;
            background-color: #fff;
            background-clip: border-box;
            border: 0 solid rgba(0,0,0,.125);
            border-radius: .25rem;
        }

        .card-body {
            flex: 1 1 auto;
            min-height: 1px;
            padding: 1rem;
        }
    </style>
</body>
</html>
@code {
    [Parameter]
    public string Id { get; set; }
    public IssueCore Core = new IssueCore();
    public List<Issue> PublicIssues = new List<Issue>();
    IssueEditor UpdateEditor;
    public Issue Issue = new Issue();
    public Issue ClickedIssue = new Issue();
    public async void OnEdited(OnEditedResult onEdited)
    {
        var result = await Core.UpdatePublicIssue(onEdited.Issue);
        for (int i = 0; i < PublicIssues.Count; ++i)
        {
            if (PublicIssues[i].Id == onEdited.Issue.Id)
            {
                PublicIssues[i] = onEdited.Issue;
            }
        }

    }
    public async void OnUpdateClick(Issue issue)
    {
        ClickedIssue = new Issue()
        {
            Description = issue.Description,
            Id = issue.Id,
            LastUpdated = issue.LastUpdated,
            Solution = issue.Solution,
            Solved = issue.Solved,
            Tag = issue.Tag,
            Title = issue.Title,
            Status = issue.Status,
            Email = issue.Email,
            Comments = issue.Comments
        };
        StateHasChanged();
        UpdateEditor.OnIssueClick(ClickedIssue);
    }
    protected override async Task OnInitializedAsync()
    {
        await Core.Initiliaze();
        PublicIssues = await Core.GetPublicIssues();
        for (int i = 0; i < PublicIssues.Count; ++i)
        {
            if (PublicIssues[i].Id == Id)
            {
                OnUpdateClick(PublicIssues[i]);
            }
        }
    }
}
